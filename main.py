import asyncio
import uuid
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.exceptions import TelegramBadRequest
import json
import os
from aiogram import F
from aiogram.types import Message



API_TOKEN = '7390057733:AAHGLDXhlYgJ0wI1LOunrh13Uq7TL_OVPbk'
BOT_USERNAME = 'GarantOtcElfbot' # —é–∑–µ—Ä—ã –±–µ–∑ @
ADMIN_USERNAME = 'garantelfots'
ADMINS = [532319147, 7872455559]
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
# dp.include_router(router)


# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
all_users_file = "all_users.json"
if os.path.exists(all_users_file):
    with open(all_users_file, "r") as f:
        try:
            all_users = set(json.load(f))
        except json.JSONDecodeError:
            all_users = set()
else:
    all_users = set()
    print("set")


DEALS_FILE = "deals.json"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–¥–µ–ª–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
if os.path.exists(DEALS_FILE):
    with open(DEALS_FILE, "r") as f:
        try:
            deal_storage = json.load(f)
        except json.JSONDecodeError:
            deal_storage = {}
else:
    deal_storage = {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫–∏ –≤ —Ñ–∞–π–ª
def save_deals():
    with open(DEALS_FILE, "w") as f:
        json.dump(deal_storage, f, indent=2, ensure_ascii=False)


# –ü–∞–º—è—Ç—å —Å–¥–µ–ª–æ–∫
# deal_storage = {}  # deal_id -> dict


ADMIN_PAYMENT_INFO = {
    "RUB": "–†–µ–∫–≤–∏–∑–∏—Ç—ã –†–§ –∫–∞—Ä—Ç–∞: 2202208016410459",
    "UAH": "–†–µ–∫–≤–∏–∑–∏—Ç—ã –£–ö–† –∫–∞—Ä—Ç–∞: 4441111021471648",
    "TON": "–ö–æ—à–µ–ª–µ–∫ TON –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: UQCeWKoXz1gOgYL_7aZWna70ecSaVdiwl4PatPt7fN505N2L"
}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# all_users = set()

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class SimpleStateStorage:
    def __init__(self):
        self.states = {}

    def set_state(self, user_id, state):
        self.states[user_id] = state

    def get_state(self, user_id):
        return self.states.get(user_id)

    def clear_state(self, user_id):
        self.states.pop(user_id, None)

broadcast_state = SimpleStateStorage()

# –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ bot['key']
from types import MethodType
Bot.__setitem__ = MethodType(lambda self, key, value: setattr(self, key, value), Bot)
Bot.__getitem__ = MethodType(lambda self, key: getattr(self, key), Bot)

bot['state'] = broadcast_state


# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üì• –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="create_deal")],
        [InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="ref_link")],
        # [InlineKeyboardButton(text="üåê Change language", callback_data="change_lang")],
        [InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"https://t.me/{ADMIN_USERNAME.lstrip('@')}")]
    ]
)

payment_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –¢–û–ù –∫–æ—à–µ–ª–µ–∫", callback_data="pay_ton_wallet")],
        [InlineKeyboardButton(text="üí≥ –ù–∞ –∫–∞—Ä—Ç—É", callback_data="pay_card")],
        [InlineKeyboardButton(text="‚≠ê –ó–≤–µ–∑–¥—ã", callback_data="pay_stars")]
    ]
)

currency_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†—É–±–ª–∏", callback_data="currency_rub")],
        [InlineKeyboardButton(text="üá∫üá¶ –ì—Ä–∏–≤–Ω—ã", callback_data="currency_uah")]
    ]
)

def get_deal_action_keyboard(deal_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
            [InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏", callback_data=f"cancel_deal:{deal_id}")]
        ]
    )


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class DealStates(StatesGroup):
    waiting_for_ton_wallet = State()
    waiting_for_currency = State()
    waiting_for_card_number = State()
    waiting_for_amount = State()
    waiting_for_product = State()



# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (user_id -> {'count': int, 'invited_users': set()})
referrals = {}

@router.message(Command("start"))
async def start_handler(message: Message):
    parts = message.text.split(maxsplit=1)
    args = parts[1] if len(parts) > 1 else None
    all_users.add(message.from_user.id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º all_users –≤ —Ñ–∞–π–ª
    with open(all_users_file, "w") as f:
        json.dump(list(all_users), f)


    if args:
        # ‚úÖ 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        if args.startswith("ref_"):
            ref_id = int(args.replace("ref_", ""))
            if ref_id != message.from_user.id:
                if ref_id not in referrals:
                    referrals[ref_id] = {'count': 0, 'invited_users': set()}
                if message.from_user.id not in referrals[ref_id]['invited_users']:
                    referrals[ref_id]['invited_users'].add(message.from_user.id)
                    referrals[ref_id]['count'] += 1
                await message.answer(f"üëã –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{ref_id}`.")

        # ‚úÖ 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ ID —Å–¥–µ–ª–∫–∏
        elif args in deal_storage:
            deal = deal_storage[args]
            currency = deal.get("currency", "")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
            if currency == "‚ÇΩ":
                admin_payment = ADMIN_PAYMENT_INFO.get("RUB")
            elif currency == "‚Ç¥":
                admin_payment = ADMIN_PAYMENT_INFO.get("UAH")
            elif currency == "TON":
                admin_payment = ADMIN_PAYMENT_INFO.get("TON")
            else:
                admin_payment = "–†–µ–∫–≤–∏–∑–∏—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

            # –ú–µ—Ç–æ–¥ –±–µ–∑ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ (–æ–±—Ä–µ–∑–∞–µ–º –∏–∑ deal['method'])
            method_name = deal.get("method", "").split(" (")[0]

            text = (
                f"üîê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ:\n\n"
                f"üí≥ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {method_name} ({admin_payment})\n"
                f"üíµ –°—É–º–º–∞: {deal['amount']} {currency}\n"
                f"üéÅ –¢–æ–≤–∞—Ä: {deal['product']}\n\n"
                f"‚ÑπÔ∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏):\n"
                f"{deal.get('user1_payment_details', '–†–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')}\n\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª."
            )

            if message.from_user.id != deal.get("creator_id"):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                deal["buyer_id"] = message.from_user.id
                deal["buyer_username"] = message.from_user.username

                save_deals()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ–º—É
                await message.answer(text, reply_markup=get_deal_action_keyboard(args), parse_mode=ParseMode.HTML)


                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
                creator_id = deal.get("creator_id")
                await bot.send_message(
                    creator_id,
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} "
                    f"–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–¥–µ–ª–∫–µ.\n"
                    f"–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã."
                )
            else:
                await message.answer(text)
            return  # –í—ã—Ö–æ–¥, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

    # –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *ELF OTC*! \n"
        "üíº –ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ! "
        "–û—Ç Telegram-–ø–æ–¥–∞—Ä–∫–æ–≤ –∏ NFT –¥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ñ–∏–∞—Ç–∞ ‚Äì —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Ä–∏—Å–∫–∞. \n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(lambda c: c.data == "ref_link")
async def referral_link_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    ref_link = f"https://t.me/{BOT_USERNAME}?start=ref_{user_id}"
    count = referrals.get(user_id, {}).get("count", 0)

    text = (
        f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"<code>{ref_link}</code>\n\n"
        f"üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö:</b> {count}\n"
        f"üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> 0.0 TON"
    )

    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("cancel_deal:"))
async def cancel_deal_handler(callback: CallbackQuery):
    deal_id = callback.data.split(":")[1]
    deal = deal_storage.get(deal_id)

    if not deal:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    if callback.from_user.id != deal.get("buyer_id"):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É.", show_alert=True)
        return

    if deal.get("confirmed"):
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.", show_alert=True)
        return

    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" / "–ù–µ—Ç"
    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞, –≤—ã–π—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏", callback_data=f"confirm_cancel:{deal_id}"),
            InlineKeyboardButton(text="–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_cancel")
        ]
    ])

    await callback.message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏? –û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", reply_markup=confirm_kb)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("confirm_cancel:"))
async def confirm_cancel_handler(callback: CallbackQuery):
    deal_id = callback.data.split(":")[1]
    deal = deal_storage.get(deal_id)

    if not deal:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    if callback.from_user.id != deal.get("buyer_id"):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É.", show_alert=True)
        return

    if deal.get("canceled"):
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
        return

    deal["canceled"] = True

    new_text = (
        f"‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–¥–µ–ª–∫–∏ `{deal_id}`.\n\n"
        f"üí¨ –î–µ–Ω—å–≥–∏ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏–ª–∏—Å—å. –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
    )

    try:
        await callback.message.edit_text(
            new_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=None
        )
    except aiogram.exceptions.TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
    creator_id = deal.get("creator_id")
    if creator_id:
        await bot.send_message(
            creator_id,
            f"‚ö†Ô∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å @{callback.from_user.username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –≤—ã—à–µ–ª –∏–∑ —Å–¥–µ–ª–∫–∏ `{deal_id}`. –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            parse_mode=ParseMode.MARKDOWN
        )

    await callback.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–¥–µ–ª–∫–∏.")



@router.callback_query(lambda c: c.data == "cancel_cancel")
async def cancel_cancel_handler(callback: CallbackQuery):
    await callback.message.delete_reply_markup()
    await callback.answer("–û—Ç–º–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–∫–∏.")


@router.callback_query(lambda c: c.data.startswith("confirm_payment:"))
async def confirm_payment_callback(callback: CallbackQuery):
    if callback.from_user.id not in ADMINS:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –æ–ø–ª–∞—Ç—É.", show_alert=True)
        return

    deal_id = callback.data.split(":")[1]
    deal = deal_storage.get(deal_id)

    if not deal:
        await callback.message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    deal["confirmed"] = True
    save_deals()


    buyer_id = deal.get("buyer_id")
    creator_id = deal.get("creator_id")

    # –ü–æ–∫—É–ø–∞—Ç–µ–ª—é
    if buyer_id:
        try:
            await bot.send_message(
                buyer_id,
                "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é: {e}")

    # –ü—Ä–æ–¥–∞–≤—Ü—É
    if creator_id:
        try:
            await bot.send_message(
                creator_id,
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–µ—Ä–µ–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")

    # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
    await callback.message.edit_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ —Å–¥–µ–ª–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    await callback.answer()



@router.callback_query(lambda c: c.data == "check_payment")
async def check_payment_handler(callback: CallbackQuery):
    # –ù–∞–π–¥—ë–º –Ω—É–∂–Ω—É—é —Å–¥–µ–ª–∫—É –ø–æ buyer_id
    deal_id = None
    for d_id, deal in deal_storage.items():
        if (
            deal.get("buyer_id") == callback.from_user.id and 
            not deal.get("canceled") and 
            not deal.get("confirmed")
        ):
            deal_id = d_id
            break

 

    if not deal_id:
        await callback.message.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    deal = deal_storage[deal_id]

    # –ï—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚Äî –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    if deal.get("canceled"):
        await callback.message.answer("‚ùå –°–¥–µ–ª–∫–∞ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return

    creator_id = deal.get("creator_id")
    buyer_username = callback.from_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    product = deal.get("product", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    amount = deal.get("amount", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    currency = deal.get("currency", "")

    # –ü–æ–∫—É–ø–∞—Ç–µ–ª—é
    await callback.message.answer("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ.")

    # –ê–¥–º–∏–Ω—É ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É"
    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                callback_data=f"confirm_payment:{deal_id}"
            )]
        ]
    )

    for admin_id in ADMINS:
        await bot.send_message(
            admin_id,
            f"üì• –ü–æ–∫—É–ø–∞—Ç–µ–ª—å @{buyer_username} –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ —Å–¥–µ–ª–∫–µ.\n"
            f"üÜî ID —Å–¥–µ–ª–∫–∏: `{deal_id}`\n"
            f"üíµ –°—É–º–º–∞: {amount} {currency}\n"
            f"üéÅ –¢–æ–≤–∞—Ä: {product}",
            reply_markup=confirm_keyboard,
            parse_mode=ParseMode.MARKDOWN
        )

    # –ü—Ä–æ–¥–∞–≤—Ü—É ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        await bot.send_message(
            creator_id,
            f"üîî –ü–æ–∫—É–ø–∞—Ç–µ–ª—å @{buyer_username} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ —Å–¥–µ–ª–∫–µ:\n"
            f"<code>{product}</code>",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")

    await callback.answer("‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)

@router.callback_query(lambda c: c.data == "create_deal")
async def create_deal(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_keyboard)

@router.callback_query(lambda c: c.data == "pay_ton_wallet")
async def pay_ton_wallet_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *TON –∫–æ—à–µ–ª–µ–∫* –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n\n–ü—Ä–∏–º–µ—Ä:\n`EQC1234567890abcdef...`"
    )
    await state.set_state(DealStates.waiting_for_ton_wallet)

@router.message(DealStates.waiting_for_ton_wallet)
async def ton_wallet_entered(message: Message, state: FSMContext):
    wallet = message.text.strip()
    await state.update_data(method="TON", payment_details=wallet)
    await message.answer("‚úÖ TON –∫–æ—à–µ–ª–µ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):")
    await state.set_state(DealStates.waiting_for_amount)

@router.callback_query(lambda c: c.data == "pay_card")
async def pay_card_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=currency_keyboard)
    await state.set_state(DealStates.waiting_for_currency)

@router.callback_query(lambda c: c.data in ["currency_rub", "currency_uah"])
async def currency_chosen(callback: CallbackQuery, state: FSMContext):
    currency = "—Ä—É–±–ª–∏" if callback.data == "currency_rub" else "–≥—Ä–∏–≤–Ω—ã"
    await state.update_data(method="–ö–∞—Ä—Ç–∞", currency=currency)
    await callback.message.answer(
        f"üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–ë–∞–Ω–∫ - 1234567890123456`\n\n–ü—Ä–∏–º–µ—Ä:\n`–ï–≤—Ä–æ–ë–∞–Ω–∫ - 1234567890123456`"
    )
    await state.set_state(DealStates.waiting_for_card_number)

@router.message(DealStates.waiting_for_card_number)
async def card_number_entered(message: Message, state: FSMContext):
    card = message.text.strip()
    await state.update_data(payment_details=card)
    await message.answer("‚úÖ –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏:")
    await state.set_state(DealStates.waiting_for_amount)

@router.callback_query(lambda c: c.data == "pay_stars")
async def pay_stars_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(method="–ó–≤–µ–∑–¥—ã", payment_details="–æ–ø–ª–∞—Ç–∞ –∑–≤–µ–∑–¥–∞–º–∏")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏:")
    await state.set_state(DealStates.waiting_for_amount)

@router.message(DealStates.waiting_for_amount)
async def amount_entered(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):")
        return
    await state.update_data(amount=amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É:")
    await state.set_state(DealStates.waiting_for_product)

@router.message(DealStates.waiting_for_product)
async def product_entered(message: Message, state: FSMContext):
    product = message.text.strip()
    data = await state.get_data()

    method = data.get("method")
    details = data.get("payment_details", "")
    amount = data["amount"]
    currency = ""

    if method == "TON":
        currency = "TON"
    elif method == "–ö–∞—Ä—Ç–∞":
        if data.get("currency") == "—Ä—É–±–ª–∏":
            currency = "‚ÇΩ"
        elif data.get("currency") == "–≥—Ä–∏–≤–Ω—ã":
            currency = "‚Ç¥"
    elif method == "–ó–≤–µ–∑–¥—ã":
        currency = "‚≠ê"

    deal_id = str(uuid.uuid4())[:8]
    deal_storage[deal_id] = {
    'creator_id': message.from_user.id,
    'creator_username': message.from_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",  # <-- –¥–æ–±–∞–≤–ª–µ–Ω–æ
    'method': f"{method} ({details})",
    'amount': amount,
    'currency': currency,
    'product': product,
    'user1_payment_details': details
    }

    save_deals()




    link = f"https://t.me/{BOT_USERNAME}?start={deal_id}"
    await message.answer(
        f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üí≥ –ú–µ—Ç–æ–¥: {deal_storage[deal_id]['method']}\n"
        f"üíµ –°—É–º–º–∞: {amount} {currency}\n"
        f"üéÅ –¢–æ–≤–∞—Ä: {product}\n\n"
        f"üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤—Ç–æ—Ä–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É:\n{link}"
    )
    await state.clear()

@router.message(Command("broadcast"))
async def broadcast_command(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    bot['state'].set_state(message.from_user.id, "waiting_for_broadcast_text")


@router.message(lambda msg: msg.from_user.id in ADMINS)
async def broadcast_text_handler(message: Message):
    if bot['state'].get_state(message.from_user.id) != "waiting_for_broadcast_text":
        return

    bot['state'].clear_state(message.from_user.id)

    sent, failed = 0, 0
    for user_id in all_users:
        try:
            await bot.send_message(user_id, message.text)
            sent += 1
        except Exception:
            failed += 1

    await message.answer(
        f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {sent}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed}"
    )



@dp.message(Command("send"))
async def send_to_user(message: types.Message):
    # print("‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /send –≤—ã–∑–≤–∞–Ω")
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>", parse_mode=None)
        return

    user_id_str, text = parts[1], parts[2]
    try:
        user_id = int(user_id_str)
        await bot.send_message(user_id, text)
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `{user_id}`.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
@dp.message(Command("users"))
async def list_users(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not all_users:
        await message.answer("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    lines = []
    for user_id in all_users:
        try:
            user = await bot.get_chat(user_id)
            full_name = user.full_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            username = f"@{user.username}" if user.username else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            lines.append(f"{full_name} - {username} - `{user_id}`")
        except Exception as e:
            lines.append(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è info –¥–ª—è ID {user_id}: {e}")

    result = "\n".join(lines)
    
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ‚Äî —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    if len(result) > 4000:
        chunks = [result[i:i+4000] for i in range(0, len(result), 4000)]
        for chunk in chunks:
            await message.answer(chunk, parse_mode="Markdown")
    else:
        await message.answer(result, parse_mode="Markdown")

@dp.message(Command("cancel_deal"))
async def admin_cancel_deal(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cancel_deal <deal_id>", parse_mode=None)
        return

    deal_id = parts[1].strip()

    deal = deal_storage.get(deal_id)
    if not deal:
        await message.answer(f"‚ùå –°–¥–µ–ª–∫–∞ —Å ID `{deal_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if deal.get("canceled"):
        await message.answer(f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ `{deal_id}` —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    deal["canceled"] = True
    save_deals()


    creator_id = deal.get("creator_id")
    buyer_id = deal.get("buyer_id")

    if creator_id:
        try:
            await bot.send_message(
                creator_id,
                f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ `{deal_id}` –±—ã–ª–∞ *–æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*.",
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")

    if buyer_id:
        try:
            await bot.send_message(
                buyer_id,
                f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ `{deal_id}` –±—ã–ª–∞ *–æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*. –î–µ–Ω—å–≥–∏ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏–ª–∏—Å—å.",
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é: {e}")

    await message.answer(f"‚úÖ –°–¥–µ–ª–∫–∞ `{deal_id}` —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", parse_mode="Markdown")




# –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ MarkdownV2 –≤—Ä—É—á–Ω—É—é
def escape_md(text: str) -> str:
    if not isinstance(text, str):
        text = str(text)
    return text.translate(str.maketrans({
        '_': '\\_',
        '*': '\\*',
        '[': '\\[',
        ']': '\\]',
        '(': '\\(',
        ')': '\\)',
        '~': '\\~',
        '`': '\\`',
        '>': '\\>',
        '#': '\\#',
        '+': '\\+',
        '-': '\\-',
        '=': '\\=',
        '|': '\\|',
        '{': '\\{',
        '}': '\\}',
        '.': '\\.',
        '!': '\\!',
    }))

@dp.message(Command("all_deals"))
async def all_deals_handler(message: types.Message):
    try:
        if message.from_user.id not in ADMINS:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        if not deal_storage:
            await message.answer("üì≠ –°–¥–µ–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        response = ""
        count = 0

        for deal_id, deal in deal_storage.items():
            creator_id = deal.get("creator_id", "‚ùì")
            creator_username = escape_md(f"@{deal.get('creator_username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            buyer_id = deal.get("buyer_id")
            buyer_username = escape_md(f"@{deal.get('buyer_username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}") if buyer_id else "‚Äî"

            method = escape_md(deal.get("method", "‚Äî"))
            currency = escape_md(deal.get("currency", "‚Äî"))
            product = escape_md(deal.get("product", "‚Äî"))
            amount = escape_md(str(deal.get("amount", "‚Äî")))

            status = (
                "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" if deal.get("confirmed") else
                "‚ùå –æ—Ç–º–µ–Ω–µ–Ω–∞" if deal.get("canceled") else
                "üïê –∞–∫—Ç–∏–≤–Ω–∞"
            )

            response += (
                f"üÜî ID: `{escape_md(deal_id)}`\n"
                f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {creator_username} ({creator_id})\n"
                f"üßë‚Äçüíª –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer_username} ({buyer_id or '‚Äî'})\n"
                f"üí≥ –ú–µ—Ç–æ–¥: {method}\n"
                f"üíµ –°—É–º–º–∞: {amount} {currency}\n"
                f"üéÅ –¢–æ–≤–∞—Ä: {product}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: *{status}*\n"
                f"{'-' * 30}\n"
            )

            count += 1

        # –û—Ç–ø—Ä–∞–≤–∫–∞
        if len(response) > 4000:
            await message.answer(f"üì¶ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {count}", parse_mode="MarkdownV2")
            chunks = [response[i:i + 4000] for i in range(0, len(response), 4000)]
            for chunk in chunks:
                await message.answer(chunk, parse_mode="MarkdownV2")
        else:
            await message.answer(f"üì¶ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {count}\n\n{response}", parse_mode="MarkdownV2")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞:\n<code>{escape_md(str(e))}</code>", parse_mode="HTML")
        raise

@dp.message(Command("active_deals"))
async def active_deals_handler(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    active = {
        deal_id: deal
        for deal_id, deal in deal_storage.items()
        if not deal.get("canceled") and not deal.get("confirmed")
    }

    if not active:
        await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.")
        return

    response = ""
    count = 0

    for deal_id, deal in active.items():
        creator_id = deal.get("creator_id", "‚ùì")
        creator_username = f"@{deal.get('creator_username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        buyer_id = deal.get("buyer_id", None)
        buyer_username = f"@{deal.get('buyer_username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}" if buyer_id else "‚Äî"

        response += (
            f"üÜî ID: `{deal_id}`\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {creator_username} ({creator_id})\n"
            f"üßë‚Äçüíª –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer_username} ({buyer_id or '‚Äî'})\n"
            f"üí≥ –ú–µ—Ç–æ–¥: {deal.get('method')}\n"
            f"üíµ –°—É–º–º–∞: {deal.get('amount')} {deal.get('currency')}\n"
            f"üéÅ –¢–æ–≤–∞—Ä: {deal.get('product')}\n"
            f"{'-' * 30}\n"
        )
        count += 1

    if len(response) > 4000:
        chunks = [response[i:i + 4000] for i in range(0, len(response), 4000)]
        for chunk in chunks:
            await message.answer(chunk, parse_mode="Markdown")
    else:
        await message.answer(f"üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {count}\n\n{response}", parse_mode="Markdown")


@dp.message(Command("confirm"))
async def admin_confirm_deal(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm <deal_id>", parse_mode=None)
        return

    deal_id = parts[1].strip()
    deal = deal_storage.get(deal_id)

    if not deal:
        await message.answer(f"‚ùå –°–¥–µ–ª–∫–∞ —Å ID `{deal_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if deal.get("confirmed"):
        await message.answer(f"‚úÖ –°–¥–µ–ª–∫–∞ `{deal_id}` —É–∂–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Ä–∞–Ω–µ–µ.")
        return

    if deal.get("canceled"):
        await message.answer(f"‚ùå –°–¥–µ–ª–∫–∞ `{deal_id}` –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return

    deal["confirmed"] = True
    save_deals()

    buyer_id = deal.get("buyer_id")
    creator_id = deal.get("creator_id")

    # –ü–æ–∫—É–ø–∞—Ç–µ–ª—é
    if buyer_id:
        try:
            await bot.send_message(
                buyer_id,
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ —Å–¥–µ–ª–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."
            )
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é: {e}")

    # –ü—Ä–æ–¥–∞–≤—Ü—É
    if creator_id:
        try:
            await bot.send_message(
                creator_id,
                "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É –ø–æ –≤–∞—à–µ–π —Å–¥–µ–ª–∫–µ. –ü–µ—Ä–µ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é."
            )
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")

    await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ —Å–¥–µ–ª–∫–µ `{deal_id}` —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", parse_mode="Markdown")

@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    text = (
        "üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/admin ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
        "/users ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/send &lt;userid&gt; &lt;—Å–æ–æ–±—â–µ–Ω–∏–µ&gt; ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "/broadcast ‚Äî —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "/cancel_deal &lt;dealid&gt; ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É –≤—Ä—É—á–Ω—É—é\n"
        "/all_deals ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫\n"
        "/active_deals ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫\n"
        "/confirm &lt;deal_id&gt; ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ ID\n"
    )
    await message.answer(text, parse_mode=ParseMode.HTML)

async def main():
    dp.include_router(router)  # üëà –ü–µ—Ä–µ–Ω–æ—Å —Å—é–¥–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
